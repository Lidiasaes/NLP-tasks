"""
Tutorial: https://www.kaggle.com/code/robikscube/sentiment-analysis-python-youtube-tutorial/notebook

pip install ipywidgets

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk

df = pd.read_csv("C:/Users/User/OneDrive/Desktop/Datasets-sample-learn/Reviews-food-Amazon.csv")
print(df.head())
print(df.shape) # ver tama√±o

df = df.head(500) # es muy grande, cogemos pocos
print(df.head())


######
##QUICK EDA
######


ax= df["Score"].value_counts().sort_index().plot(
        kind="bar", 
        title="Count of Reviews by Stars", 
        figsize=(10,5))
ax.set_xlabel("Review Stars")
#plt.show()


#####
## BASIC NLTK
#####
example = df["Text"][50]
print(example)

## TOKENS
print(nltk.word_tokenize(example))
tokens = nltk.word_tokenize(example)
print(tokens[:10]) # primeros 10 tokens

## POS TAGs
tagged = nltk.pos_tag(tokens) # sacamos los postag de los tokens
print(tagged[:10])

## NER tags
entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()


###########################
###########################
###########################
## VADER

# remove stopwords
# each word is scored and combined to a total score

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia= SentimentIntensityAnalyzer() # I create my object

# example 1
mytext= "I am so happy! "
print(sia.polarity_scores(mytext))

# example 2
mytext= "This is the worst thing ever."
print(sia.polarity_scores(mytext))


# Voy a aplicarlo para todo el df
results = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row["Text"] # tomo el texto
    myid = row["Id"] # tomo el Id
    results[myid] = sia.polarity_scores(text) # cojo la polarity del id


print("---- dataframe con sentiment score por id-----")
vaders = pd.DataFrame(results).T # .T cambio el orden para que se vea mejor el dataframe
vaders= vaders.reset_index().rename(columns={"index":"Id"})
vaders = vaders.merge(df, how="left")

# Sentiment score and metadata 
print(vaders.head())


############
#####

#  if the score is a 5 star, it will likely be a more positive text 
# if it were a 1 star text, then it will be more negative 
ax = sns.barplot(data= vaders, x= "Score", y = "compound") # hacemos plot de este data
ax.set_title("Compound Score by Amazon Star Reviews")
plt.show()




fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='Score', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Score', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Score', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()





###############
###########
##########
## ROBERTA PRETRAINED
##########


""" pip install transformers"""

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

# VADER results on example
print(example)
sia.polarity_scores(example)

# Run for Roberta Model
encoded_text = tokenizer(example, return_tensors='pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)


def polarity_scores_roberta(example):
    encoded_text = tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg' : scores[0],
        'roberta_neu' : scores[1],
        'roberta_pos' : scores[2]
    }
    return scores_dict


res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    try:
        text = row['Text']
        myid = row['Id']
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[myid] = both
    except RuntimeError:
        print(f'Broke for id {myid}')


results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(df, how='left')





##########
##########
###### COMPARE BOTH MODELS

print(results_df.columns)



# combinar y comparar
sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos',
                  'roberta_neg', 'roberta_neu', 'roberta_pos'],
            hue='Score',
            palette='tab10')
plt.show()





###########
##########
##### some samples 
results_df.query('Score == 1') \
    .sort_values('roberta_pos', ascending=False)['Text'].values[0]

results_df.query('Score == 5') \
    .sort_values('roberta_neg', ascending=False)['Text'].values[0]






###############
#################
####### TRANSFORMERS PIPELINE


from transformers import pipeline
text2 = "Try it"
sent_pipeline = pipeline("sentiment-analysis")
sent_pipeline(text2)
